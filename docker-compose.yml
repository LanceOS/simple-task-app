# This is a Docker Compose file that defines and runs multi-container Docker applications.
# Each 'service' in this file corresponds to a container.

services:
  # Service for the PostgreSQL database.
  postgres:
    # Uses the latest official PostgreSQL image from Docker Hub.
    image: postgres:latest
    # Ensures the container restarts automatically if it stops.
    restart: always
    # Maps port 5432 on the host to port 5432 in the container, allowing external access to the database.
    ports:
      - 5432:5432
    # Environment variables for configuring the PostgreSQL database.
    # These values are expected to be provided via a .env file or environment variables in your system.
    environment:
      POSTGRES_USER: ${PRIVATE_POSTGRES_USER}      # Username for the PostgreSQL superuser.
      POSTGRES_PASSWORD: ${PRIVATE_POSTGRES_PASSWORD} # Password for the PostgreSQL superuser.
      POSTGRES_DB: ${PRIVATE_POSTGRES_DB}          # Default database to create on startup.
    # Mounts a named volume to persist PostgreSQL data, ensuring data is not lost if the container is removed.
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # Connects this service to the 'project_network' for inter-service communication.
    networks:
      - project_network

  # Service for pgAdmin, a web-based administration tool for PostgreSQL.
  pgadmin:
    # Uses the official pgAdmin 4 image.
    image: dpage/pgadmin4
    # Maps port 5050 on the host to port 80 in the container, allowing access to the pgAdmin web interface.
    ports:
      - '5050:80'
    # Environment variables for configuring pgAdmin.
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PRIVATE_PG_ADMIN}          # Default email for pgAdmin login.
      PGADMIN_DEFAULT_PASSWORD: ${PRIVATE_PG_ADMIN_PASSWORD} # Default password for pgAdmin login.
    # Ensures that the 'postgres' service starts before 'pgadmin'.
    depends_on:
      - postgres
    # Connects this service to the 'project_network'.
    networks:
      - project_network

  # Service for MinIO, an open-source object storage server compatible with Amazon S3 APIs.
  minio:
    # Uses a specific release image of MinIO.
    image: minio/minio:RELEASE.2025-04-22T22-12-26Z-cpuv1
    # Assigns a custom name to the MinIO container.
    container_name: my_minio
    # Command to run the MinIO server, specifying the data directory and console address.
    command: server /data --console-address ":9001"
    # Environment variables for MinIO root credentials.
    environment:
      MINIO_ROOT_USER: ${PRIVATE_MINIO_ROOT_USER}    # Root username for MinIO.
      MINIO_ROOT_PASSWORD: ${PRIVATE_MINIO_ROOT_PASSWORD} # Root password for MinIO.
    # Maps ports for MinIO.
    ports:
      - '9000:9000' # S3 API: Used by applications to interact with MinIO as an S3 compatible storage.
      - '9001:9001' # MinIO web UI: For managing MinIO buckets and objects through a web browser.
    # Mounts a named volume to persist MinIO data.
    volumes:
      - minio_data:/data
    # Connects this service to the 'project_network'.
    networks:
      - project_network

# Defines named volumes, which are used to persist data generated by Docker containers.
volumes:
  # Volume for PostgreSQL database files.
  postgres_data:
  # Volume for MinIO object storage data.
  minio_data:

# Defines networks, allowing containers to communicate with each other.
networks:
  # A custom bridge network for all services in this Docker Compose setup.
  project_network: